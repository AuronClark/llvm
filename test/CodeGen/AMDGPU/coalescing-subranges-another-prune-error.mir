# RUN: llc -mtriple=amdgcn--amdpal -mcpu=gfx803 -run-pass=simple-register-coalescing -o - %s | FileCheck -check-prefix=GCN %s

# With one version of the D48102 fix, this test failed with
# Assertion failed: (Id != S.end() && T != S.end() && T->valno == Id->valno), function pruneSubRegValues, file ../lib/CodeGen/RegisterCoalescer.cpp, line 2875.

# GCN: {{^body}}

--- |
  ; ModuleID = 'cutdown.bc'
  source_filename = "llpcPipeline"
  target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5"
  target triple = "amdgcn--amdpal"
  
  ; Function Attrs: nounwind
  define dllexport amdgpu_ps void @_amdgpu_ps_main(float %arg) local_unnamed_addr #0 !spirv.ExecutionModel !1 {
  bb8:
    br i1 undef, label %bb9, label %Flow5, !amdgpu.uniform !2
  
  bb9:                                              ; preds = %bb8
    %tmp = insertelement <2 x float> undef, float %arg, i32 1
    %tmp10 = fmul reassoc nnan arcp contract <2 x float> %tmp, <float 6.250000e-02, float 6.250000e-02>
    %x0.i955 = extractelement <2 x float> %tmp10, i32 0
    %tmp11 = tail call float @llvm.floor.f32(float %x0.i955) #7
    %tmp12 = fadd reassoc nnan arcp contract float %tmp11, 0.000000e+00
    %tmp13 = fptoui float %tmp12 to i32
    %tmp14 = shl i32 %tmp13, 1
    %tmp15 = tail call float @llvm.sqrt.f32(float undef) #7
    %tmp16 = bitcast float %tmp15 to i32
    %tmp17 = insertelement <4 x i32> undef, i32 %tmp16, i32 0
    %tmp18 = shufflevector <4 x i32> %tmp17, <4 x i32> undef, <4 x i32> <i32 0, i32 4, i32 5, i32 6>
    br label %bb19
  
  Flow5:                                            ; preds = %Flow4, %bb8
    %0 = phi <4 x i32> [ %36, %Flow4 ], [ zeroinitializer, %bb8 ]
    br label %bb47
  
  bb19:                                             ; preds = %bb9, %Flow
    %phi.broken6 = phi i64 [ 0, %bb9 ], [ %22, %Flow ]
    %1 = phi <4 x i32> [ %15, %Flow ], [ undef, %bb9 ]
    %__llpc_global_proxy_r8.12.vec.insert23224382 = phi <4 x i32> [ %19, %Flow ], [ undef, %bb9 ]
    %__llpc_global_proxy_r7.12.vec.extract4381 = phi i32 [ %18, %Flow ], [ 0, %bb9 ]
    %__llpc_global_proxy_r9.34359 = phi <4 x i32> [ %17, %Flow ], [ zeroinitializer, %bb9 ]
    %tmp20 = or i32 %__llpc_global_proxy_r7.12.vec.extract4381, %tmp14
    %tmp21 = call <4 x float> @llvm.amdgcn.buffer.load.format.v4f32(<4 x i32> undef, i32 %tmp20, i32 0, i1 false, i1 false) #7
    %tmp22 = bitcast <4 x float> %tmp21 to <4 x i32>
    %tmp23 = lshr <4 x i32> %tmp22, <i32 30, i32 30, i32 30, i32 30>
    %tmp24 = extractelement <4 x i32> %tmp23, i32 0
    %__llpc_global_proxy_r9.0.vec.insert2411 = insertelement <4 x i32> %__llpc_global_proxy_r9.34359, i32 0, i32 0
    %tmp25 = icmp eq i32 %tmp24, 0
    %tmp26 = sext i1 %tmp25 to i32
    %__llpc_global_proxy_r9.4.vec.insert24484304 = insertelement <4 x i32> %__llpc_global_proxy_r9.0.vec.insert2411, i32 %tmp26, i32 1
    %2 = xor i1 %tmp25, true
    %3 = call { i1, i64 } @llvm.amdgcn.if(i1 %2)
    %4 = extractvalue { i1, i64 } %3, 0
    %5 = extractvalue { i1, i64 } %3, 1
    br i1 %4, label %.lr.ph4331, label %Flow
  
  Flow1:                                            ; preds = %bb44, %._crit_edge4332
    %loop.phi7 = phi i64 [ %35, %bb44 ], [ %phi.broken6, %._crit_edge4332 ]
    %6 = phi <4 x i32> [ %__llpc_global_proxy_r9.4.vec.insert2448, %bb44 ], [ %1, %._crit_edge4332 ]
    %7 = phi <4 x i32> [ %__llpc_global_proxy_r9.4.vec.insert2448, %bb44 ], [ undef, %._crit_edge4332 ]
    %8 = phi i32 [ 1, %bb44 ], [ undef, %._crit_edge4332 ]
    %9 = phi <4 x i32> [ %__llpc_global_proxy_r8.12.vec.insert2322, %bb44 ], [ undef, %._crit_edge4332 ]
    %10 = phi i1 [ false, %bb44 ], [ true, %._crit_edge4332 ]
    %11 = call i64 @llvm.amdgcn.else.break(i64 %29, i64 %loop.phi7)
    call void @llvm.amdgcn.end.cf(i64 %29)
    br label %Flow
  
  Flow2:                                            ; preds = %Flow
    call void @llvm.amdgcn.end.cf(i64 %22)
    %12 = call { i1, i64 } @llvm.amdgcn.if(i1 %21)
    %13 = extractvalue { i1, i64 } %12, 0
    %14 = extractvalue { i1, i64 } %12, 1
    br i1 %13, label %._crit_edge4332.thread, label %Flow3
  
  ._crit_edge4332.thread:                           ; preds = %Flow2
    %__llpc_global_proxy_r8.12.vec.insert23644434 = insertelement <4 x i32> %__llpc_global_proxy_r8.12.vec.insert23224382, i32 -1, i32 3
    br label %Flow3
  
  .lr.ph4331:                                       ; preds = %bb19
    br label %bb27
  
  Flow:                                             ; preds = %Flow1, %bb19
    %loop.phi = phi i64 [ %11, %Flow1 ], [ %phi.broken6, %bb19 ]
    %15 = phi <4 x i32> [ %6, %Flow1 ], [ %1, %bb19 ]
    %16 = phi <4 x i32> [ %__llpc_global_proxy_r9.4.vec.insert2448, %Flow1 ], [ undef, %bb19 ]
    %17 = phi <4 x i32> [ %7, %Flow1 ], [ undef, %bb19 ]
    %18 = phi i32 [ %8, %Flow1 ], [ undef, %bb19 ]
    %19 = phi <4 x i32> [ %9, %Flow1 ], [ undef, %bb19 ]
    %20 = phi i1 [ %10, %Flow1 ], [ false, %bb19 ]
    %21 = phi i1 [ false, %Flow1 ], [ true, %bb19 ]
    %22 = call i64 @llvm.amdgcn.else.break(i64 %5, i64 %loop.phi)
    call void @llvm.amdgcn.end.cf(i64 %5)
    %23 = call i1 @llvm.amdgcn.loop(i64 %22)
    br i1 %23, label %Flow2, label %bb19
  
  bb27:                                             ; preds = %.lr.ph4331, %._crit_edge4286
    %phi.broken = phi i64 [ 0, %.lr.ph4331 ], [ %24, %._crit_edge4286 ]
    %__llpc_global_proxy_r9.4.vec.insert24484329 = phi <4 x i32> [ %__llpc_global_proxy_r9.4.vec.insert2448, %._crit_edge4286 ], [ %__llpc_global_proxy_r9.4.vec.insert24484304, %.lr.ph4331 ]
    %__llpc_global_proxy_r9.44305 = phi <4 x i32> [ %__llpc_global_proxy_r9.0.vec.insert, %._crit_edge4286 ], [ %__llpc_global_proxy_r9.0.vec.insert2411, %.lr.ph4331 ]
    br i1 undef, label %._crit_edge, label %bb30, !amdgpu.uniform !2, !structurizecfg.uniform !2
  
  bb30:                                             ; preds = %bb27
    br label %._crit_edge, !structurizecfg.uniform !2
  
  ._crit_edge:                                      ; preds = %bb30, %bb27
    br i1 undef, label %._crit_edge4245, label %bb38, !amdgpu.uniform !2, !structurizecfg.uniform !2
  
  bb38:                                             ; preds = %._crit_edge
    br label %._crit_edge4245, !structurizecfg.uniform !2
  
  ._crit_edge4245:                                  ; preds = %bb38, %._crit_edge
    br i1 undef, label %.lr.ph4285, label %._crit_edge4286, !amdgpu.uniform !2, !structurizecfg.uniform !2
  
  .lr.ph4285:                                       ; preds = %._crit_edge4245
    br label %._crit_edge4286, !structurizecfg.uniform !2
  
  ._crit_edge4286:                                  ; preds = %.lr.ph4285, %._crit_edge4245
    %__llpc_global_proxy_r11.12.vec.insert2682 = shufflevector <4 x i32> undef, <4 x i32> %__llpc_global_proxy_r9.44305, <4 x i32> <i32 0, i32 1, i32 2, i32 4>
    %__llpc_global_proxy_r9.4.vec.insert2492 = shufflevector <4 x i32> %__llpc_global_proxy_r9.4.vec.insert24484329, <4 x i32> %__llpc_global_proxy_r11.12.vec.insert2682, <4 x i32> <i32 0, i32 7, i32 2, i32 3>
    %__llpc_global_proxy_r15.12.vec.extract30424267 = extractelement <4 x i32> %__llpc_global_proxy_r9.4.vec.insert2492, i32 1
    %__llpc_global_proxy_r9.0.vec.insert = insertelement <4 x i32> %__llpc_global_proxy_r9.4.vec.insert2492, i32 %__llpc_global_proxy_r15.12.vec.extract30424267, i32 0
    %tmp41 = icmp uge i32 %__llpc_global_proxy_r15.12.vec.extract30424267, %tmp24
    %__llpc_global_proxy_r9.4.vec.insert2448 = insertelement <4 x i32> %__llpc_global_proxy_r9.0.vec.insert, i32 undef, i32 1
    %24 = call i64 @llvm.amdgcn.if.break(i1 %tmp41, i64 %phi.broken)
    %25 = call i1 @llvm.amdgcn.loop(i64 %24)
    br i1 %25, label %._crit_edge4332, label %bb27
  
  ._crit_edge4332:                                  ; preds = %._crit_edge4286
    call void @llvm.amdgcn.end.cf(i64 %24)
    %tmp42 = icmp ult i32 %tmp24, 12
    %26 = xor i1 %tmp42, true
    %27 = call { i1, i64 } @llvm.amdgcn.if(i1 %26)
    %28 = extractvalue { i1, i64 } %27, 0
    %29 = extractvalue { i1, i64 } %27, 1
    br i1 %28, label %bb44, label %Flow1
  
  Flow3:                                            ; preds = %._crit_edge4332.thread, %Flow2
    %30 = phi <4 x i32> [ %__llpc_global_proxy_r9.4.vec.insert24484304, %._crit_edge4332.thread ], [ %16, %Flow2 ]
    %31 = phi i1 [ true, %._crit_edge4332.thread ], [ %20, %Flow2 ]
    call void @llvm.amdgcn.end.cf(i64 %14)
    %32 = call { i1, i64 } @llvm.amdgcn.if(i1 %31)
    %33 = extractvalue { i1, i64 } %32, 0
    %34 = extractvalue { i1, i64 } %32, 1
    br i1 %33, label %.loopexit4453, label %Flow4
  
  .loopexit4453:                                    ; preds = %Flow3
    %__llpc_global_proxy_r9.4.vec.insert2448.lcssa4450 = phi <4 x i32> [ %30, %Flow3 ]
    %tmp43 = shufflevector <4 x i32> %tmp18, <4 x i32> undef, <4 x i32> <i32 0, i32 4, i32 5, i32 6>
    br label %Flow4
  
  bb44:                                             ; preds = %._crit_edge4332
    %__llpc_global_proxy_r8.12.vec.insert2364 = insertelement <4 x i32> %__llpc_global_proxy_r8.12.vec.insert23224382, i32 undef, i32 3
    %tmp45 = icmp ne i32 %__llpc_global_proxy_r7.12.vec.extract4381, 0
    %__llpc_global_proxy_r8.12.vec.insert2322 = insertelement <4 x i32> %__llpc_global_proxy_r8.12.vec.insert2364, i32 undef, i32 3
    %35 = call i64 @llvm.amdgcn.if.break(i1 %tmp45, i64 %phi.broken6)
    br label %Flow1
  
  Flow4:                                            ; preds = %.loopexit4453, %Flow3
    %36 = phi <4 x i32> [ %__llpc_global_proxy_r9.4.vec.insert2448.lcssa4450, %.loopexit4453 ], [ %15, %Flow3 ]
    call void @llvm.amdgcn.end.cf(i64 %34)
    br label %Flow5
  
  bb47:                                             ; preds = %Flow5
    %__llpc_global_proxy_r9.7 = phi <4 x i32> [ %0, %Flow5 ]
    %tmp50 = shufflevector <4 x i32> %__llpc_global_proxy_r9.7, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
    %tmp51 = bitcast <2 x i32> %tmp50 to <2 x float>
    %tmp52 = fadd reassoc nnan arcp contract <2 x float> zeroinitializer, %tmp51
    %tmp53 = call <4 x float> @llvm.amdgcn.image.sample.v4f32.v2f32.v8i32(<2 x float> %tmp52, <8 x i32> undef, <4 x i32> undef, i32 15, i1 false, i1 false, i1 false, i1 false, i1 false) #7
    %tmp54 = fmul reassoc nnan arcp contract <4 x float> %tmp53, zeroinitializer
    %tmp55 = extractelement <4 x float> %tmp54, i32 3
    %tmp56 = fmul reassoc nnan arcp contract float 0.000000e+00, %tmp55
    %tmp57 = bitcast float %tmp56 to i32
    %tmp58 = insertelement <3 x i32> undef, i32 %tmp57, i32 0
    %tmp59 = shufflevector <3 x i32> %tmp58, <3 x i32> undef, <3 x i32> zeroinitializer
    %tmp60 = bitcast <3 x i32> %tmp59 to <3 x float>
    %tmp61 = fmul reassoc nnan arcp contract <3 x float> zeroinitializer, %tmp60
    %tmp62 = fadd reassoc nnan arcp contract <3 x float> zeroinitializer, %tmp61
    %x2.i = extractelement <3 x float> %tmp62, i32 2
    %tmp63 = tail call float @llvm.maxnum.f32(float %x2.i, float 0.000000e+00) #7
    %tmp64 = call <2 x half> @llvm.amdgcn.cvt.pkrtz(float %tmp63, float 1.000000e+00) #8
    call void @llvm.amdgcn.exp.compr.v2f16(i32 0, i32 15, <2 x half> undef, <2 x half> %tmp64, i1 false, i1 true) #7
    ret void
  }
  
  ; Function Attrs: nounwind readnone speculatable
  declare float @llvm.sqrt.f32(float) #1
  
  ; Function Attrs: nounwind readnone
  declare i32 @llvm.amdgcn.s.buffer.load.i32(<4 x i32>, i32, i1) #2
  
  ; Function Attrs: nounwind readonly
  declare <4 x float> @llvm.amdgcn.image.sample.v4f32.v2f32.v8i32(<2 x float>, <8 x i32>, <4 x i32>, i32, i1, i1, i1, i1, i1) #3
  
  ; Function Attrs: nounwind readnone speculatable
  declare float @llvm.maxnum.f32(float, float) #1
  
  ; Function Attrs: nounwind readnone speculatable
  declare float @llvm.floor.f32(float) #1
  
  ; Function Attrs: nounwind readonly
  declare <4 x float> @llvm.amdgcn.buffer.load.format.v4f32(<4 x i32>, i32, i32, i1, i1) #3
  
  ; Function Attrs: nounwind readnone speculatable
  declare <2 x half> @llvm.amdgcn.cvt.pkrtz(float, float) #1
  
  ; Function Attrs: nounwind
  declare void @llvm.amdgcn.exp.compr.v2f16(i32, i32, <2 x half>, <2 x half>, i1, i1) #4
  
  ; Function Attrs: convergent nounwind
  declare { i1, i64 } @llvm.amdgcn.if(i1) #5
  
  ; Function Attrs: convergent nounwind
  declare { i1, i64 } @llvm.amdgcn.else(i64) #5
  
  ; Function Attrs: convergent nounwind readnone
  declare i64 @llvm.amdgcn.break(i64) #6
  
  ; Function Attrs: convergent nounwind readnone
  declare i64 @llvm.amdgcn.if.break(i1, i64) #6
  
  ; Function Attrs: convergent nounwind readnone
  declare i64 @llvm.amdgcn.else.break(i64, i64) #6
  
  ; Function Attrs: convergent nounwind
  declare i1 @llvm.amdgcn.loop(i64) #5
  
  ; Function Attrs: convergent nounwind
  declare void @llvm.amdgcn.end.cf(i64) #5
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #7
  
  attributes #0 = { nounwind "InitialPSInputAddr"="3842" "target-cpu"="gfx803" }
  attributes #1 = { nounwind readnone speculatable "target-cpu"="gfx803" }
  attributes #2 = { nounwind readnone "target-cpu"="gfx803" }
  attributes #3 = { nounwind readonly "target-cpu"="gfx803" }
  attributes #4 = { nounwind "target-cpu"="gfx803" }
  attributes #5 = { convergent nounwind }
  attributes #6 = { convergent nounwind readnone }
  attributes #7 = { nounwind }
  attributes #8 = { nounwind readnone speculatable }
  
  !amdgpu.pal.metadata = !{!0}
  
  !0 = !{i32 268435482, i32 5, i32 268435488, i32 -1, i32 268435480, i32 -540785387, i32 268435481, i32 -1758319860, i32 268435538, i32 4096, i32 268435539, i32 8192, i32 11338, i32 53215232, i32 11339, i32 16, i32 41411, i32 4, i32 41393, i32 2, i32 41479, i32 0, i32 41476, i32 17301504, i32 41478, i32 1087, i32 41721, i32 45, i32 41633, i32 0, i32 41702, i32 0, i32 41653, i32 0, i32 41657, i32 0, i32 41661, i32 0, i32 41665, i32 0, i32 41645, i32 0, i32 41750, i32 14, i32 268435528, i32 0, i32 268435493, i32 0, i32 268435500, i32 0, i32 268435507, i32 256, i32 268435514, i32 104, i32 268435536, i32 0, i32 11274, i32 2883584, i32 11275, i32 6, i32 41412, i32 0, i32 41413, i32 20, i32 41400, i32 16777216, i32 41398, i32 2, i32 41395, i32 0, i32 41396, i32 0, i32 41397, i32 0, i32 41619, i32 100794764, i32 41475, i32 16, i32 41103, i32 255, i32 268435485, i32 0, i32 268435529, i32 0, i32 268435494, i32 0, i32 268435501, i32 0, i32 268435508, i32 256, i32 268435515, i32 104, i32 41685, i32 0, i32 268435460, i32 -434521603, i32 268435461, i32 1719750426, i32 268435476, i32 738696316, i32 268435477, i32 218380994, i32 268435532, i32 5, i32 41642, i32 127, i32 11346, i32 268435459, i32 11347, i32 268435460, i32 11340, i32 268435456, i32 11342, i32 0, i32 11343, i32 1, i32 11344, i32 2, i32 11345, i32 4, i32 41361, i32 0, i32 41362, i32 1, i32 11276, i32 268435456, i32 11278, i32 3}
  !1 = !{i32 4}
  !2 = !{}

...
---
name:            _amdgpu_ps_main
alignment:       0
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
registers:       
  - { id: 0, class: sreg_32_xm0, preferred-register: '' }
  - { id: 1, class: sreg_128, preferred-register: '' }
  - { id: 2, class: sreg_128, preferred-register: '' }
  - { id: 3, class: sreg_64, preferred-register: '' }
  - { id: 4, class: sreg_128, preferred-register: '' }
  - { id: 5, class: sreg_128, preferred-register: '' }
  - { id: 6, class: sreg_32_xm0, preferred-register: '' }
  - { id: 7, class: sreg_128, preferred-register: '' }
  - { id: 8, class: sreg_32_xm0, preferred-register: '' }
  - { id: 9, class: sreg_128, preferred-register: '' }
  - { id: 10, class: sreg_128, preferred-register: '' }
  - { id: 11, class: sreg_64, preferred-register: '' }
  - { id: 12, class: sreg_64, preferred-register: '' }
  - { id: 13, class: sreg_128, preferred-register: '' }
  - { id: 14, class: sreg_128, preferred-register: '' }
  - { id: 15, class: sreg_32_xm0, preferred-register: '' }
  - { id: 16, class: sreg_128, preferred-register: '' }
  - { id: 17, class: vreg_1, preferred-register: '' }
  - { id: 18, class: sreg_64, preferred-register: '' }
  - { id: 19, class: sreg_64, preferred-register: '' }
  - { id: 20, class: sreg_64, preferred-register: '' }
  - { id: 21, class: sreg_128, preferred-register: '' }
  - { id: 22, class: sreg_128, preferred-register: '' }
  - { id: 23, class: sreg_128, preferred-register: '' }
  - { id: 24, class: sreg_32_xm0, preferred-register: '' }
  - { id: 25, class: sreg_128, preferred-register: '' }
  - { id: 26, class: vreg_1, preferred-register: '' }
  - { id: 27, class: vreg_1, preferred-register: '' }
  - { id: 28, class: sreg_64, preferred-register: '' }
  - { id: 29, class: sreg_64, preferred-register: '' }
  - { id: 30, class: sreg_128, preferred-register: '' }
  - { id: 31, class: sreg_128, preferred-register: '' }
  - { id: 32, class: sreg_128, preferred-register: '' }
  - { id: 33, class: sreg_128, preferred-register: '' }
  - { id: 34, class: sreg_64, preferred-register: '' }
  - { id: 35, class: sreg_64, preferred-register: '' }
  - { id: 36, class: sreg_128, preferred-register: '' }
  - { id: 37, class: vreg_1, preferred-register: '' }
  - { id: 38, class: sreg_64, preferred-register: '' }
  - { id: 39, class: sreg_128, preferred-register: '' }
  - { id: 40, class: sreg_128, preferred-register: '' }
  - { id: 41, class: sreg_64, preferred-register: '' }
  - { id: 42, class: sreg_128, preferred-register: '' }
  - { id: 43, class: sreg_128, preferred-register: '' }
  - { id: 44, class: vgpr_32, preferred-register: '' }
  - { id: 45, class: sreg_128, preferred-register: '' }
  - { id: 46, class: sgpr_32, preferred-register: '' }
  - { id: 47, class: sreg_128, preferred-register: '' }
  - { id: 48, class: sreg_64, preferred-register: '' }
  - { id: 49, class: sreg_128, preferred-register: '' }
  - { id: 50, class: sreg_32_xm0, preferred-register: '' }
  - { id: 51, class: sreg_128, preferred-register: '' }
  - { id: 52, class: vgpr_32, preferred-register: '' }
  - { id: 53, class: vgpr_32, preferred-register: '' }
  - { id: 54, class: vgpr_32, preferred-register: '' }
  - { id: 55, class: vgpr_32, preferred-register: '' }
  - { id: 56, class: vgpr_32, preferred-register: '' }
  - { id: 57, class: vgpr_32, preferred-register: '' }
  - { id: 58, class: vgpr_32, preferred-register: '' }
  - { id: 59, class: sreg_32_xm0, preferred-register: '' }
  - { id: 60, class: sreg_32, preferred-register: '' }
  - { id: 61, class: vgpr_32, preferred-register: '' }
  - { id: 62, class: vgpr_32, preferred-register: '' }
  - { id: 63, class: sreg_128, preferred-register: '' }
  - { id: 64, class: sreg_32_xm0, preferred-register: '' }
  - { id: 65, class: sreg_32_xm0, preferred-register: '' }
  - { id: 66, class: sreg_32_xm0, preferred-register: '' }
  - { id: 67, class: sreg_32_xm0, preferred-register: '' }
  - { id: 68, class: sreg_32_xm0, preferred-register: '' }
  - { id: 69, class: sreg_32_xm0, preferred-register: '' }
  - { id: 70, class: sreg_128, preferred-register: '' }
  - { id: 71, class: sreg_128, preferred-register: '' }
  - { id: 72, class: sreg_32_xm0, preferred-register: '' }
  - { id: 73, class: vgpr_32, preferred-register: '' }
  - { id: 74, class: vgpr_32, preferred-register: '' }
  - { id: 75, class: sreg_32_xm0, preferred-register: '' }
  - { id: 76, class: vreg_128, preferred-register: '' }
  - { id: 77, class: vgpr_32, preferred-register: '' }
  - { id: 78, class: sreg_128, preferred-register: '' }
  - { id: 79, class: sreg_32_xm0, preferred-register: '' }
  - { id: 80, class: sreg_32_xm0, preferred-register: '' }
  - { id: 81, class: sreg_32_xm0, preferred-register: '' }
  - { id: 82, class: sreg_64, preferred-register: '$vcc' }
  - { id: 83, class: sgpr_32, preferred-register: '' }
  - { id: 84, class: sreg_64_xexec, preferred-register: '$vcc' }
  - { id: 85, class: sgpr_32, preferred-register: '' }
  - { id: 86, class: vgpr_32, preferred-register: '' }
  - { id: 87, class: sreg_64, preferred-register: '' }
  - { id: 88, class: sreg_64, preferred-register: '' }
  - { id: 89, class: sreg_128, preferred-register: '' }
  - { id: 90, class: sreg_64, preferred-register: '' }
  - { id: 91, class: sreg_32_xm0, preferred-register: '' }
  - { id: 92, class: sreg_32_xm0, preferred-register: '' }
  - { id: 93, class: sreg_32_xm0, preferred-register: '' }
  - { id: 94, class: sreg_128, preferred-register: '' }
  - { id: 95, class: sreg_64, preferred-register: '$vcc' }
  - { id: 96, class: vgpr_32, preferred-register: '' }
  - { id: 97, class: sreg_128, preferred-register: '' }
  - { id: 98, class: sreg_32_xm0, preferred-register: '' }
  - { id: 99, class: vgpr_32, preferred-register: '' }
  - { id: 100, class: vgpr_32, preferred-register: '' }
  - { id: 101, class: sreg_64, preferred-register: '$vcc' }
  - { id: 102, class: sreg_64, preferred-register: '' }
  - { id: 103, class: sreg_32_xm0, preferred-register: '' }
  - { id: 104, class: vgpr_32, preferred-register: '' }
  - { id: 105, class: vgpr_32, preferred-register: '' }
  - { id: 106, class: sreg_64, preferred-register: '$vcc' }
  - { id: 107, class: sreg_64, preferred-register: '' }
  - { id: 108, class: vgpr_32, preferred-register: '' }
  - { id: 109, class: sreg_64, preferred-register: '' }
  - { id: 110, class: sreg_64, preferred-register: '$vcc' }
  - { id: 111, class: vgpr_32, preferred-register: '' }
  - { id: 112, class: sreg_64, preferred-register: '' }
  - { id: 113, class: sreg_64, preferred-register: '$vcc' }
  - { id: 114, class: sreg_32_xm0, preferred-register: '' }
  - { id: 115, class: sreg_32_xm0, preferred-register: '' }
  - { id: 116, class: vgpr_32, preferred-register: '' }
  - { id: 117, class: vgpr_32, preferred-register: '' }
  - { id: 118, class: vgpr_32, preferred-register: '' }
  - { id: 119, class: sreg_64, preferred-register: '' }
  - { id: 120, class: sreg_32_xm0, preferred-register: '' }
  - { id: 121, class: sreg_256, preferred-register: '' }
  - { id: 122, class: vgpr_32, preferred-register: '' }
  - { id: 123, class: vreg_64, preferred-register: '' }
  - { id: 124, class: sreg_128, preferred-register: '' }
  - { id: 125, class: vgpr_32, preferred-register: '' }
  - { id: 126, class: vgpr_32, preferred-register: '' }
  - { id: 127, class: vgpr_32, preferred-register: '' }
  - { id: 128, class: vgpr_32, preferred-register: '' }
  - { id: 129, class: vgpr_32, preferred-register: '' }
  - { id: 130, class: vgpr_32, preferred-register: '' }
  - { id: 131, class: vgpr_32, preferred-register: '' }
  - { id: 132, class: vgpr_32, preferred-register: '' }
  - { id: 133, class: vgpr_32, preferred-register: '' }
  - { id: 134, class: vgpr_32, preferred-register: '' }
  - { id: 135, class: vgpr_32, preferred-register: '' }
  - { id: 136, class: vgpr_32, preferred-register: '' }
  - { id: 137, class: vreg_128, preferred-register: '' }
  - { id: 138, class: vgpr_32, preferred-register: '' }
  - { id: 139, class: vgpr_32, preferred-register: '' }
  - { id: 140, class: vgpr_32, preferred-register: '' }
  - { id: 141, class: vreg_128, preferred-register: '' }
  - { id: 142, class: vreg_128, preferred-register: '' }
  - { id: 143, class: vreg_128, preferred-register: '' }
  - { id: 144, class: vreg_128, preferred-register: '' }
  - { id: 145, class: vgpr_32, preferred-register: '' }
  - { id: 146, class: vgpr_32, preferred-register: '' }
  - { id: 147, class: vreg_128, preferred-register: '' }
  - { id: 148, class: vreg_128, preferred-register: '' }
  - { id: 149, class: vreg_128, preferred-register: '' }
  - { id: 150, class: vreg_128, preferred-register: '' }
  - { id: 151, class: vreg_128, preferred-register: '' }
  - { id: 152, class: vreg_128, preferred-register: '' }
  - { id: 153, class: vreg_128, preferred-register: '' }
  - { id: 154, class: vreg_128, preferred-register: '' }
  - { id: 155, class: vreg_128, preferred-register: '' }
  - { id: 156, class: vreg_128, preferred-register: '' }
  - { id: 157, class: vreg_128, preferred-register: '' }
  - { id: 158, class: vreg_128, preferred-register: '' }
  - { id: 159, class: vreg_128, preferred-register: '' }
  - { id: 160, class: vreg_128, preferred-register: '' }
  - { id: 161, class: vreg_128, preferred-register: '' }
  - { id: 162, class: vgpr_32, preferred-register: '' }
  - { id: 163, class: vgpr_32, preferred-register: '' }
  - { id: 164, class: vgpr_32, preferred-register: '' }
  - { id: 165, class: vreg_128, preferred-register: '' }
  - { id: 166, class: vreg_128, preferred-register: '' }
  - { id: 167, class: vreg_128, preferred-register: '' }
  - { id: 168, class: vreg_128, preferred-register: '' }
  - { id: 169, class: vreg_128, preferred-register: '' }
  - { id: 170, class: vreg_128, preferred-register: '' }
  - { id: 171, class: vgpr_32, preferred-register: '' }
  - { id: 172, class: vreg_128, preferred-register: '' }
  - { id: 173, class: vgpr_32, preferred-register: '' }
  - { id: 174, class: vgpr_32, preferred-register: '' }
  - { id: 175, class: vreg_128, preferred-register: '' }
  - { id: 176, class: vreg_128, preferred-register: '' }
  - { id: 177, class: vreg_128, preferred-register: '' }
  - { id: 178, class: vreg_128, preferred-register: '' }
  - { id: 179, class: vreg_128, preferred-register: '' }
  - { id: 180, class: vreg_128, preferred-register: '' }
  - { id: 181, class: vreg_128, preferred-register: '' }
  - { id: 182, class: vreg_128, preferred-register: '' }
  - { id: 183, class: vreg_128, preferred-register: '' }
  - { id: 184, class: vreg_128, preferred-register: '' }
  - { id: 185, class: vreg_128, preferred-register: '' }
  - { id: 186, class: vgpr_32, preferred-register: '' }
  - { id: 187, class: vgpr_32, preferred-register: '' }
  - { id: 188, class: vreg_128, preferred-register: '' }
  - { id: 189, class: vgpr_32, preferred-register: '' }
  - { id: 190, class: vgpr_32, preferred-register: '' }
  - { id: 191, class: vgpr_32, preferred-register: '' }
  - { id: 192, class: vgpr_32, preferred-register: '' }
  - { id: 193, class: vgpr_32, preferred-register: '' }
  - { id: 194, class: vgpr_32, preferred-register: '' }
  - { id: 195, class: vgpr_32, preferred-register: '' }
  - { id: 196, class: vreg_64, preferred-register: '' }
  - { id: 197, class: sreg_64, preferred-register: '' }
  - { id: 198, class: vreg_128, preferred-register: '' }
  - { id: 199, class: sreg_64, preferred-register: '' }
  - { id: 200, class: vreg_128, preferred-register: '' }
  - { id: 201, class: vgpr_32, preferred-register: '' }
  - { id: 202, class: vreg_128, preferred-register: '' }
  - { id: 203, class: sreg_64, preferred-register: '' }
  - { id: 204, class: vreg_128, preferred-register: '' }
  - { id: 205, class: vreg_128, preferred-register: '' }
  - { id: 206, class: vgpr_32, preferred-register: '' }
  - { id: 207, class: vreg_1, preferred-register: '' }
  - { id: 208, class: sreg_64, preferred-register: '' }
  - { id: 209, class: vreg_128, preferred-register: '' }
  - { id: 210, class: vreg_128, preferred-register: '' }
  - { id: 211, class: vreg_128, preferred-register: '' }
  - { id: 212, class: vgpr_32, preferred-register: '' }
  - { id: 213, class: vreg_1, preferred-register: '' }
  - { id: 214, class: vreg_1, preferred-register: '' }
  - { id: 215, class: sreg_64, preferred-register: '' }
  - { id: 216, class: vreg_128, preferred-register: '' }
  - { id: 217, class: vreg_128, preferred-register: '' }
  - { id: 218, class: vreg_128, preferred-register: '' }
  - { id: 219, class: vreg_1, preferred-register: '' }
  - { id: 220, class: vreg_128, preferred-register: '' }
  - { id: 221, class: sreg_64, preferred-register: '' }
  - { id: 222, class: sreg_64, preferred-register: '' }
  - { id: 223, class: sreg_64, preferred-register: '' }
  - { id: 224, class: sreg_64, preferred-register: '' }
  - { id: 225, class: sreg_64, preferred-register: '' }
  - { id: 226, class: sreg_64, preferred-register: '' }
liveins:         
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    0
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      
stack:           
constants:       
body:             |
  bb.0.bb8:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
  
    %197:sreg_64 = COPY $exec
    %46:sgpr_32 = S_MOV_B32 0
    undef %47.sub0:sreg_128 = COPY %46
    %47.sub1:sreg_128 = COPY %46
    %47.sub2:sreg_128 = COPY %46
    %47.sub3:sreg_128 = COPY %46
    $exec = S_WQM_B64 $exec, implicit-def dead $scc
    S_CBRANCH_SCC0 %bb.2, implicit undef $scc
  
  bb.1:
    successors: %bb.3(0x80000000)
  
    %45:sreg_128 = COPY killed %47
    %142:vreg_128 = COPY killed %45
    %198:vreg_128 = COPY killed %142
    S_BRANCH %bb.3
  
  bb.2.bb9:
    successors: %bb.4(0x80000000)
  
    %53:vgpr_32 = V_MUL_F32_e32 1031798784, undef %54:vgpr_32, implicit $exec
    %55:vgpr_32 = V_FLOOR_F32_e32 killed %53, implicit $exec
    %57:vgpr_32 = V_ADD_F32_e32 0, killed %55, implicit $exec
    %58:vgpr_32 = V_CVT_U32_F32_e32 killed %57, implicit $exec
    %135:vgpr_32 = V_LSHLREV_B32_e32 1, killed %58, implicit $exec
    %48:sreg_64 = S_MOV_B64 0
    %51:sreg_128 = COPY killed %47
    %163:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %166:vreg_128 = COPY killed %51
    %199:sreg_64 = COPY killed %48
    %200:vreg_128 = IMPLICIT_DEF
    %201:vgpr_32 = COPY killed %163
    %202:vreg_128 = COPY killed %166
    S_BRANCH %bb.4
  
  bb.3.Flow5:
    successors: %bb.22(0x80000000)
  
    %141:vreg_128 = COPY killed %198
    S_BRANCH %bb.22
  
  bb.4.bb19:
    successors: %bb.8(0x40000000), %bb.9(0x40000000)
  
    %165:vreg_128 = COPY killed %202
    %162:vgpr_32 = COPY killed %201
    %147:vreg_128 = COPY killed %200
    %3:sreg_64 = COPY killed %199
    %136:vgpr_32 = V_OR_B32_e32 %162, %135, implicit $exec
    %76:vreg_128 = BUFFER_LOAD_FORMAT_XYZW_IDXEN killed %136, undef %78:sreg_128, 0, 0, 0, 0, 0, implicit $exec :: (dereferenceable load 16 from constant-pool, align 1, addrspace 4)
    %190:vgpr_32 = V_LSHRREV_B32_e32 30, killed %76.sub0, implicit $exec
    %168:vreg_128 = COPY killed %165
    %168.sub0:vreg_128 = COPY %46
    %82:sreg_64 = V_CMP_NE_U32_e64 0, %190, implicit $exec
    %84:sreg_64_xexec = V_CMP_EQ_U32_e64 0, %190, implicit $exec
    dead %86:vgpr_32 = V_CNDMASK_B32_e64 0, -1, killed %84, implicit $exec
    %188:vreg_128 = COPY %168
    %188.sub1:vreg_128 = COPY undef %86
    %74:vgpr_32 = V_MOV_B32_e32 -1, implicit $exec
    %73:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %208:sreg_64 = COPY %3
    %209:vreg_128 = COPY %147
    %210:vreg_128 = IMPLICIT_DEF
    %211:vreg_128 = IMPLICIT_DEF
    %212:vgpr_32 = IMPLICIT_DEF
    %213:vreg_1 = COPY killed %73
    %214:vreg_1 = COPY killed %74
    %221:sreg_64 = COPY $exec, implicit-def $exec
    %222:sreg_64 = S_AND_B64 %221, %82, implicit-def dead $scc
    %11:sreg_64 = S_XOR_B64 %222, %221, implicit-def dead $scc
    $exec = S_MOV_B64_term killed %222
    SI_MASK_BRANCH %bb.9, implicit $exec
    S_BRANCH %bb.8
  
  bb.5.Flow1:
    successors: %bb.9(0x80000000)
  
    $exec = S_OR_B64 $exec, %35, implicit-def $scc
    %17:vreg_1 = COPY killed %207
    %191:vgpr_32 = COPY killed %206
    %180:vreg_128 = COPY killed %205
    %150:vreg_128 = COPY killed %204
    %12:sreg_64 = COPY killed %203
    %18:sreg_64 = S_AND_B64 $exec, %35, implicit-def $scc
    %18:sreg_64 = S_OR_B64 %18, killed %12, implicit-def $scc
    %108:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %208:sreg_64 = COPY killed %18
    %209:vreg_128 = COPY killed %150
    %210:vreg_128 = COPY killed %172
    %211:vreg_128 = COPY killed %180
    %212:vgpr_32 = COPY killed %191
    %213:vreg_1 = COPY killed %17
    %214:vreg_1 = COPY killed %108
    S_BRANCH %bb.9
  
  bb.6.Flow2:
    successors: %bb.7(0x40000000), %bb.18(0x40000000)
  
    $exec = S_OR_B64 $exec, killed %28, implicit-def $scc
    %110:sreg_64 = V_CMP_NE_U32_e64 0, killed %27, implicit $exec
    %218:vreg_128 = COPY killed %175
    %219:vreg_1 = COPY killed %26
    %19:sreg_64 = COPY $exec, implicit-def $exec
    %223:sreg_64 = S_AND_B64 %19, %110, implicit-def dead $scc
    $exec = S_MOV_B64_term killed %223
    SI_MASK_BRANCH %bb.18, implicit $exec
    S_BRANCH %bb.7
  
  bb.7.._crit_edge4332.thread:
    successors: %bb.18(0x80000000)
  
    %111:vgpr_32 = V_MOV_B32_e32 -1, implicit $exec
    %178:vreg_128 = COPY killed %188
    %218:vreg_128 = COPY killed %178
    %219:vreg_1 = COPY killed %111
    S_BRANCH %bb.18
  
  bb.8..lr.ph4331:
    successors: %bb.10(0x80000000)
  
    %90:sreg_64 = S_MOV_B64 0
    %185:vreg_128 = COPY %188
    %215:sreg_64 = COPY killed %90
    %216:vreg_128 = COPY killed %185
    %217:vreg_128 = COPY killed %168
    S_BRANCH %bb.10
  
  bb.9.Flow:
    successors: %bb.6(0x04000000), %bb.4(0x7c000000)
  
    $exec = S_OR_B64 $exec, %11, implicit-def $scc
    %27:vreg_1 = COPY killed %214
    %26:vreg_1 = COPY killed %213
    %194:vgpr_32 = COPY killed %212
    %182:vreg_128 = COPY killed %211
    %175:vreg_128 = COPY killed %210
    %152:vreg_128 = COPY killed %209
    %20:sreg_64 = COPY killed %208
    %28:sreg_64 = S_AND_B64 $exec, %11, implicit-def $scc
    %28:sreg_64 = S_OR_B64 %28, killed %20, implicit-def $scc
    %149:vreg_128 = COPY %152
    %199:sreg_64 = COPY %28
    %200:vreg_128 = COPY killed %149
    %201:vgpr_32 = COPY killed %194
    %202:vreg_128 = COPY killed %182
    $exec = S_ANDN2_B64_term $exec, %28
    S_CBRANCH_EXECNZ %bb.4, implicit $exec
    S_BRANCH %bb.6
  
  bb.10.bb27:
    successors: %bb.12(0x40000000), %bb.11(0x40000000)
  
    %169:vreg_128 = COPY killed %217
    %184:vreg_128 = COPY killed %216
    %29:sreg_64 = COPY killed %215
    S_CBRANCH_SCC1 %bb.12, implicit undef $scc
    S_BRANCH %bb.11
  
  bb.11.bb30:
    successors: %bb.12(0x80000000)
  
  
  bb.12.._crit_edge:
    successors: %bb.14(0x40000000), %bb.13(0x40000000)
  
    S_CBRANCH_SCC1 %bb.14, implicit undef $scc
    S_BRANCH %bb.13
  
  bb.13.bb38:
    successors: %bb.14(0x80000000)
  
  
  bb.14.._crit_edge4245:
    successors: %bb.15(0x40000000), %bb.16(0x40000000)
  
    S_CBRANCH_SCC1 %bb.16, implicit undef $scc
    S_BRANCH %bb.15
  
  bb.15..lr.ph4285:
    successors: %bb.16(0x80000000)
  
  
  bb.16.._crit_edge4286:
    successors: %bb.17(0x04000000), %bb.10(0x7c000000)
  
    undef %172.sub0:vreg_128 = COPY %169.sub0
    %172.sub2:vreg_128 = COPY %184.sub2
    %172.sub3:vreg_128 = COPY killed %184.sub3
    %95:sreg_64 = V_CMP_GE_U32_e64 killed %169.sub0, %190, implicit $exec
    %34:sreg_64 = S_OR_B64 killed %95, killed %29, implicit-def $scc
    %170:vreg_128 = COPY %172
    %215:sreg_64 = COPY %34
    %216:vreg_128 = COPY %172
    %217:vreg_128 = COPY killed %170
    $exec = S_ANDN2_B64_term $exec, %34
    S_CBRANCH_EXECNZ %bb.10, implicit $exec
    S_BRANCH %bb.17
  
  bb.17.._crit_edge4332:
    successors: %bb.20(0x40000000), %bb.5(0x40000000)
  
    $exec = S_OR_B64 $exec, killed %34, implicit-def $scc
    %101:sreg_64 = V_CMP_LT_U32_e64 11, killed %190, implicit $exec
    %99:vgpr_32 = V_MOV_B32_e32 -1, implicit $exec
    %203:sreg_64 = COPY %3
    %204:vreg_128 = COPY killed %147
    %205:vreg_128 = IMPLICIT_DEF
    %206:vgpr_32 = IMPLICIT_DEF
    %207:vreg_1 = COPY killed %99
    %224:sreg_64 = COPY $exec, implicit-def $exec
    %225:sreg_64 = S_AND_B64 %224, %101, implicit-def dead $scc
    %35:sreg_64 = S_XOR_B64 %225, %224, implicit-def dead $scc
    $exec = S_MOV_B64_term killed %225
    SI_MASK_BRANCH %bb.5, implicit $exec
    S_BRANCH %bb.20
  
  bb.18.Flow3:
    successors: %bb.19(0x40000000), %bb.21(0x40000000)
  
    $exec = S_OR_B64 $exec, killed %19, implicit-def $scc
    %37:vreg_1 = COPY killed %219
    %177:vreg_128 = COPY killed %218
    %113:sreg_64 = V_CMP_NE_U32_e64 0, killed %37, implicit $exec
    %220:vreg_128 = COPY killed %152
    %38:sreg_64 = COPY $exec, implicit-def $exec
    %226:sreg_64 = S_AND_B64 %38, %113, implicit-def dead $scc
    $exec = S_MOV_B64_term killed %226
    SI_MASK_BRANCH %bb.21, implicit $exec
    S_BRANCH %bb.19
  
  bb.19..loopexit4453:
    successors: %bb.21(0x80000000)
  
    %154:vreg_128 = COPY killed %177
    %220:vreg_128 = COPY killed %154
    S_BRANCH %bb.21
  
  bb.20.bb44:
    successors: %bb.5(0x80000000)
  
    %105:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %106:sreg_64 = V_CMP_NE_U32_e64 0, killed %162, implicit $exec
    %41:sreg_64 = S_OR_B64 killed %106, killed %3, implicit-def $scc
    %151:vreg_128 = COPY %172
    %193:vgpr_32 = V_MOV_B32_e32 1, implicit $exec
    %203:sreg_64 = COPY killed %41
    %204:vreg_128 = COPY killed %151
    %205:vreg_128 = COPY %172
    %206:vgpr_32 = COPY killed %193
    %207:vreg_1 = COPY killed %105
    S_BRANCH %bb.5
  
  bb.21.Flow4:
    successors: %bb.3(0x80000000)
  
    $exec = S_OR_B64 $exec, killed %38, implicit-def $scc
    %153:vreg_128 = COPY killed %220
    %143:vreg_128 = COPY killed %153
    %198:vreg_128 = COPY killed %143
    S_BRANCH %bb.3
  
  bb.22.bb47:
    %117:vgpr_32 = V_ADD_F32_e32 target-flags(amdgpu-rel32-lo) 0, %141.sub3, implicit $exec
    %118:vgpr_32 = V_ADD_F32_e32 target-flags(amdgpu-gotprel32-hi) 0, killed %141.sub2, implicit $exec
    undef %196.sub0:vreg_64 = COPY killed %118
    %196.sub1:vreg_64 = COPY killed %117
    $exec = S_AND_B64 $exec, killed %197, implicit-def dead $scc
    %120:sreg_32_xm0 = S_MOV_B32 0
    undef %121.sub0:sreg_256 = COPY %120
    %121.sub1:sreg_256 = COPY %120
    %121.sub2:sreg_256 = COPY %120
    %121.sub3:sreg_256 = COPY %120
    %121.sub4:sreg_256 = COPY %120
    %121.sub5:sreg_256 = COPY %120
    %121.sub6:sreg_256 = COPY %120
    %121.sub7:sreg_256 = COPY killed %120
    %122:vgpr_32 = IMAGE_SAMPLE_V1_V2 killed %196, killed %121, undef %124:sreg_128, 8, 0, 0, 0, 0, 0, 0, 0, implicit $exec :: (dereferenceable load 16 from constant-pool, addrspace 4)
    %126:vgpr_32 = V_MUL_F32_e32 0, killed %122, implicit $exec
    %127:vgpr_32 = V_MUL_F32_e32 0, killed %126, implicit $exec
    %128:vgpr_32 = V_MAD_F32 0, killed %127, 0, 0, 0, 0, 0, 0, implicit $exec
    %129:vgpr_32 = V_MAX_F32_e32 0, killed %128, implicit $exec
    %131:vgpr_32 = V_CVT_PKRTZ_F16_F32_e64 0, killed %129, 0, 1065353216, 0, implicit $exec
    EXP 0, undef %132:vgpr_32, killed %131, undef %133:vgpr_32, undef %134:vgpr_32, -1, -1, 15, implicit $exec
    S_ENDPGM

...
